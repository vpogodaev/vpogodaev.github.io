{"version":3,"sources":["hooks/useInterval.js","utils/timeTransform.js","components/number-input/index.js","components/number-input/number-input.js","components/clock/index.js","components/clock/clock.js","components/pomodoro-buttons/index.js","components/pomodoro-buttons/pomodoro-buttons.js","components/pomodoro-timer/pomodoro-timer.js","components/pomodoro-timer/index.js","components/settings-position/settings-position.js","components/settings/index.js","components/settings/settings.js","components/pomodoro-timer-wrapper/index.js","components/pomodoro-timer-wrapper/pomodoro-timer-wrapper.js","components/app/index.js","components/app/app.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","worker","window","Worker","postMessage","onerror","err","console","error","onmessage","e","terminate","transSecsToTime","secondsToTick","seconds","minutes","Math","floor","hours","getTimeNum","num","NumberInput","props","className","readOnly","type","value","onChange","s","target","name","Clock","timeToString","time","handleChangeNumber","addHour","addMinute","addSecond","onTimeChange","PomodoroButtons","disabled","status","onStartWorkBtn","onPauseWorkBtn","onStopWorkBtn","onStartRelaxBtn","onPauseRelaxBtn","onStopRelaxBtn","onStopBtn","getButton","label","key","onClick","Button","stop","startWork","pauseWork","startRelax","pauseRelax","buttonFactory","0","1","2","3","4","5","6","stopRelax","7","8","pomodoroStatuses","PomodoroTimer","settingsBtnComponent","settingsComponent","workSettings","relaxSettings","bigRelaxSettings","useState","initSeconds","count","needsNotify","needsStop","overSeconds","needsOver","initNeedsOver","workTimer","setWorkTimer","relaxTimer","setRelaxTimer","period","bigRelaxTimer","setBigRelaxTimer","displayTimer","setDisplayTimer","overTime","setOverTime","setStatus","timerName","saveSettings","from","set","prev","relaxType","resetToDefaultTime","timer","setTimer","updateDisplayTime","secs","resetOverTime","showNotification","body","options","dir","Notification","updateDisplayTimeToRelax","labels","document","title","stopWork","timerTick","newSeconds","sTime","SettingsPosition","onOverTimeChange","onSwitchChange","settingName","handleOnTimeChange","transTimeToSecs","h","m","Form","Check","id","nanoid","checked","Settings","onSaveClick","workTimerSettings","relaxTimerSettings","bigRelaxTimerSettings","setWorkSettings","setRelaxSettings","needed","setBigRelaxSettings","handleOnTimerChange","setSettings","handleOnOverTimerChange","handleOnSwitchChange","workClock","t","PomodoroTimerWrapper","showSettings","setShowSettings","save","log","settings","App","requestPermission","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c966bd0a.chunk.js","sourcesContent":["// взято с https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const worker = new window.Worker(\"./workers/set-interval-worker.js\");\r\n      worker.postMessage({ delay });\r\n      worker.onerror = (err) => console.error(err);\r\n      worker.onmessage = (e) => {\r\n        tick();\r\n      };\r\n      return () => worker.terminate();\r\n    }\r\n  }, [delay]);\r\n}\r\n","export function transTimeToSecs(hours, minutes, seconds) {\r\n  return hours * 60 * 60 + minutes * 60 + seconds;\r\n}\r\n\r\nexport function transSecsToTime(secondsToTick) {\r\n  let seconds = secondsToTick;\r\n  let minutes = Math.floor(seconds / 60);\r\n  seconds = seconds % 60;\r\n  let hours = Math.floor(minutes / 60);\r\n  minutes = minutes % 60;\r\n\r\n  return { hours, minutes, seconds };\r\n}\r\n\r\nexport function getTimeNum(num) {\r\n  return num < 10 ? \"0\" + num : \"\" + num;\r\n}\r\n","import NumberInput from \"./number-input\";\r\nexport default NumberInput;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function NumberInput(props) {\r\n  const onChange = (e) => {\r\n    const s = e.target.value;\r\n    // чтобы не оставались нули лишние\r\n    e.target.value = \"\";\r\n    props.onChange(s, props.name);\r\n  };\r\n\r\n  const className =\r\n    \"input-time\" + (props.readOnly ? \" input-time__no-arrows\" : \"\");\r\n\r\n  return (\r\n    <input\r\n      className={className}\r\n      type={props.readOnly ? \"text\" : \"number\"}\r\n      value={props.value}\r\n      onChange={onChange}\r\n      readOnly={props.readOnly}\r\n    />\r\n  );\r\n}\r\n","import Clock from \"./clock\";\r\nexport default Clock;\r\n","import React from \"react\";\r\nimport NumberInput from \"../number-input\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function Clock(props) {\r\n  const timeToString = (time) => {\r\n    return time < 10 ? \"0\" + time : time;\r\n  };\r\n\r\n  const handleChangeNumber = (value, name) => {\r\n    let { hours, minutes, seconds } = props;\r\n\r\n    const addHour = (value) => {\r\n      if (value >= 0 && value <= 23) {\r\n        hours = +value;\r\n      }\r\n    };\r\n    const addMinute = (value) => {\r\n      if (value >= 0 && value <= 59) {\r\n        minutes = +value;\r\n      } else if (value > 59 && hours < 23) {\r\n        minutes = 0;\r\n        addHour(hours + 1);\r\n      } else if (value < 0 && hours > 0) {\r\n        minutes = 59;\r\n        addHour(hours - 1);\r\n      }\r\n    };\r\n    const addSecond = (value) => {\r\n      if (value >= 0 && value <= 59) {\r\n        seconds = +value;\r\n      } else if (value > 59 && minutes <= 59) {\r\n        seconds = 0;\r\n        addMinute(minutes + 1);\r\n      } else if (value < 0 && (minutes > 0 || hours > 0)) {\r\n        seconds = 59;\r\n        addMinute(minutes - 1);\r\n      }\r\n    };\r\n\r\n    if (name === \"hours\") {\r\n      addHour(value);\r\n    } else if (name === \"minutes\") {\r\n      addMinute(value);\r\n    } else if (name === \"seconds\") {\r\n      addSecond(value);\r\n    }\r\n\r\n    props.onTimeChange(hours, minutes, seconds);\r\n  };\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <NumberInput\r\n        value={timeToString(props.hours)}\r\n        onChange={handleChangeNumber}\r\n        name=\"hours\"\r\n        readOnly={props.readOnly}\r\n      />\r\n      <div className=\"dots\">:</div>\r\n      <NumberInput\r\n        value={timeToString(props.minutes)}\r\n        onChange={handleChangeNumber}\r\n        name=\"minutes\"\r\n        readOnly={props.readOnly}\r\n      />\r\n      <div className=\"dots\">:</div>\r\n      <NumberInput\r\n        value={timeToString(props.seconds)}\r\n        onChange={handleChangeNumber}\r\n        name=\"seconds\"\r\n        readOnly={props.readOnly}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import PomodoroButtons from \"./pomodoro-buttons\";\r\nexport default PomodoroButtons;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst PomodoroButtons = ({\r\n  status,\r\n  onStartWorkBtn,\r\n  onPauseWorkBtn,\r\n  onStopWorkBtn,\r\n  onStartRelaxBtn,\r\n  onPauseRelaxBtn,\r\n  onStopRelaxBtn,\r\n  onStopBtn,\r\n}) => {\r\n  const getButton = (label, key, onClick, disabled = false) => {\r\n    return (\r\n      <Button key={key} onClick={onClick} disabled={disabled}>\r\n        {label}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const stop = (disabled) => getButton(\"Stop\", 0, onStopBtn, disabled);\r\n  const startWork = (disabled) =>\r\n    getButton(\"Start work\", 1, onStartWorkBtn, disabled);\r\n  const pauseWork = (disabled) =>\r\n    getButton(\"Pause work\", 2, onPauseWorkBtn, disabled);\r\n  const stopWork = (disabled) =>\r\n    getButton(\"Stop work\", 3, onStopWorkBtn, disabled);\r\n  const startRelax = (disabled) =>\r\n    getButton(\"Start relax\", 4, onStartRelaxBtn, disabled);\r\n  const pauseRelax = (disabled) =>\r\n    getButton(\"Pause relax\", 5, onPauseRelaxBtn, disabled);\r\n  const stopRelax = (disabled) =>\r\n    getButton(\"Stop relax\", 6, onStopRelaxBtn, disabled);\r\n\r\n  const buttonFactory = {\r\n    // stopped\r\n    0: [startWork(), pauseWork(true), stop(true)],\r\n    // work_running\r\n    1: [startWork(true), pauseWork(), stop()],\r\n    // work_paused\r\n    2: [startWork(), stopWork(), stop()],\r\n    // work_stoped\r\n    3: [startRelax(), pauseRelax(true), stop()],\r\n    // work_over_running\r\n    4: [startRelax(), pauseRelax(true), stop()],\r\n    // relax_running\r\n    5: [startRelax(true), pauseRelax(), stop()],\r\n    // relax_paused\r\n    6: [startRelax(), stopRelax(), stop()],\r\n    // relax_stoped\r\n    7: [startWork(), pauseWork(true), stop()],\r\n    // relax_over_running\r\n    8: [startWork(), pauseWork(true), stop()],\r\n  };\r\n\r\n  return <div className=\"buttons-wrapper\">{buttonFactory[status]}</div>;\r\n};\r\n\r\nexport default PomodoroButtons;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport useInterval from \"../../hooks/useInterval\";\r\nimport { getTimeNum, transSecsToTime } from \"../../utils/timeTransform\";\r\nimport Clock from \"../clock\";\r\nimport PomodoroButtons from \"../pomodoro-buttons\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst pomodoroStatuses = {\r\n  stopped: 0,\r\n  work_running: 1,\r\n  work_paused: 2,\r\n  work_stopped: 3,\r\n  work_over_running: 4,\r\n  relax_running: 5,\r\n  relax_paused: 6,\r\n  relax_stopped: 7,\r\n  relax_over_running: 8,\r\n};\r\n\r\nconst PomodoroTimer = ({\r\n  settingsBtnComponent,\r\n  settingsComponent,\r\n  workSettings,\r\n  relaxSettings,\r\n  bigRelaxSettings,\r\n}) => {\r\n  const [workTimer, setWorkTimer] = useState({\r\n    seconds: 0,\r\n    initSeconds: workSettings.seconds,\r\n    count: 0,\r\n    needsNotify: workSettings.needsNotify,\r\n    needsStop: workSettings.needsStop,\r\n    overSeconds: workSettings.overSeconds,\r\n    needsOver: workSettings.needsOver,\r\n    initNeedsOver: workSettings.needsOver,\r\n  });\r\n  const [relaxTimer, setRelaxTimer] = useState({\r\n    seconds: 0,\r\n    initSeconds: relaxSettings.seconds,\r\n    count: 0,\r\n    needsNotify: relaxSettings.needsNotify,\r\n    needsStop: relaxSettings.needsStop,\r\n    overSeconds: relaxSettings.overSeconds,\r\n    needsOver: relaxSettings.needsOver,\r\n    initNeedsOver: relaxSettings.needsOver,\r\n  });\r\n  const [bigRelaxTimer, setBigRelaxTimer] = useState({\r\n    seconds: 0,\r\n    initSeconds: bigRelaxSettings.seconds,\r\n    count: 0,\r\n    needsNotify: bigRelaxSettings.needsNotify,\r\n    needsStop: bigRelaxSettings.needsStop,\r\n    overSeconds: bigRelaxSettings.overSeconds,\r\n    needsOver: bigRelaxSettings.needsOver,\r\n    initNeedsOver: bigRelaxSettings.needsOver,\r\n    period: bigRelaxSettings.period,\r\n  });\r\n  const [displayTimer, setDisplayTimer] = useState({\r\n    hours: 0,\r\n    seconds: 0,\r\n    minutes: 0,\r\n  });\r\n  const [overTime, setOverTime] = useState({\r\n    seconds: 0,\r\n  });\r\n  const [status, setStatus] = useState(pomodoroStatuses.stopped);\r\n  const [timerName, setTimerName] = useState(\"Timer\");\r\n\r\n  // onMount\r\n  // workSettings\r\n  const saveSettings = (from, set) => {\r\n    const { seconds, overSeconds, needsNotify, needsStop, needsOver } = from;\r\n    set((prev) => ({\r\n      ...prev,\r\n      seconds,\r\n      initSeconds: seconds,\r\n      needsNotify,\r\n      needsStop,\r\n      overSeconds,\r\n      needsOver,\r\n      initNeedsOver: workSettings.needsOver,\r\n    }));\r\n  };\r\n  useEffect(() => {\r\n    //console.log(workSettings);\r\n    setStatus(pomodoroStatuses.stopped);\r\n\r\n    saveSettings(workSettings, setWorkTimer);\r\n    saveSettings(relaxSettings, setRelaxTimer);\r\n    saveSettings(bigRelaxSettings, setBigRelaxTimer);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [workSettings, relaxSettings, bigRelaxSettings]);\r\n\r\n  const relaxType =\r\n    status === 3 || (status >= 5 && status <= 8)\r\n      ? bigRelaxTimer.initSeconds > 0 &&\r\n        workTimer.count > 0 &&\r\n        workTimer.count % bigRelaxTimer.period === 0\r\n        ? 2\r\n        : 1\r\n      : 0;\r\n\r\n  const resetToDefaultTime = (timer, setTimer) => {\r\n    const { initSeconds, initNeedsOver } = timer;\r\n    setTimer((prev) => ({\r\n      ...prev,\r\n      seconds: initSeconds,\r\n      needsOver: initNeedsOver,\r\n    }));\r\n  };\r\n  const updateDisplayTime = (secs) => {\r\n    const { hours, minutes, seconds } = transSecsToTime(secs);\r\n    setDisplayTimer({\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n    });\r\n  };\r\n  const resetOverTime = () => {\r\n    setOverTime((prev) => ({\r\n      ...prev,\r\n      seconds: 0,\r\n    }));\r\n  };\r\n  const showNotification = (name = timerName, body) => {\r\n    const options = {\r\n      body: body,\r\n      dir: \"ltr\",\r\n    };\r\n    new Notification(name, options);\r\n  };\r\n  // переключение статуса\r\n  useEffect(() => {\r\n    //console.log('status change', new Date());\r\n    if (status === pomodoroStatuses.stopped) {\r\n      resetToDefaultTime(workTimer, setWorkTimer);\r\n      resetToDefaultTime(relaxTimer, setRelaxTimer);\r\n      resetToDefaultTime(bigRelaxTimer, setBigRelaxTimer);\r\n    } else if (status === pomodoroStatuses.work_stopped) {\r\n      if (workTimer.needsNotify) {\r\n        showNotification(\"Work done\");\r\n      }\r\n      resetToDefaultTime(workTimer, setWorkTimer);\r\n      if (workTimer.needsOver) {\r\n        resetOverTime();\r\n        setStatus(pomodoroStatuses.work_over_running);\r\n      } else if (!workTimer.needsStop) {\r\n        setStatus(pomodoroStatuses.relax_running);\r\n      }\r\n    } else if (status === pomodoroStatuses.relax_stopped) {\r\n      if (\r\n        (relaxType === 1 && relaxTimer.needsNotify) ||\r\n        (relaxType === 2 && bigRelaxTimer.needsNotify)\r\n      ) {\r\n        showNotification(\"Relax done\");\r\n      }\r\n      resetToDefaultTime(relaxTimer, setRelaxTimer);\r\n      resetToDefaultTime(bigRelaxTimer, setBigRelaxTimer);\r\n      if (\r\n        (relaxType === 2 && bigRelaxTimer.needsOver) ||\r\n        (relaxType === 1 && relaxTimer.needsOver)\r\n      ) {\r\n        resetOverTime();\r\n        setStatus(pomodoroStatuses.relax_over_running);\r\n      } else if (\r\n        (relaxType === 2 && !bigRelaxTimer.needsStop) ||\r\n        (relaxType === 1 && !relaxTimer.needsStop)\r\n      ) {\r\n        setStatus(pomodoroStatuses.work_running);\r\n      }\r\n    }\r\n    // 0 - не отдых\r\n    // 1 - обычный отдых\r\n    // 2 - большой отдых\r\n    // setRelaxType(\r\n    //   status === 3 || (status >= 5 && status <= 8)\r\n    //     ? bigRelaxTimer.initSeconds > 0 &&\r\n    //       workTimer.count > 0 &&\r\n    //       workTimer.count % bigRelaxTimer.period === 0\r\n    //       ? 2\r\n    //       : 1\r\n    //     : 0\r\n    // );\r\n    // необходимо следить только за статусом\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [status]);\r\n\r\n  const updateDisplayTimeToRelax = () => {\r\n    if (relaxType === 2) {\r\n      updateDisplayTime(bigRelaxTimer.seconds);\r\n    } else {\r\n      updateDisplayTime(relaxTimer.seconds);\r\n    }\r\n  };\r\n  // обновление displayTimer\r\n  useEffect(() => {\r\n    // * если остановились полностью (0),\r\n    //    то необходимо проставить рабочее время\r\n    // * если в рабочем таймере (1 идет, 2 пауза),\r\n    //    то необходимо проставить рабочее время\r\n    // * если остановили рабочее время (3), то необходимо проставить:\r\n    //    - время просрочки, если оно необходимо\r\n    //    - время отдыха, если оно есть и не нужно время просрочки\r\n    //    - ... иначе рабочее время\r\n    // * если в таймере отдыха (5 идет, 6 пауза), то необходимо проставить:\r\n    //    - отдых, если relaxType = 1\r\n    //    - большой отдых, если relaxType = 2\r\n    // * если остановили время отдыха (7), то необходимо проставить:\r\n    //    - время просрочки, если оно необходимо\r\n    //    - ... иначе рабочее время\r\n    // * если время просрочки (4 рабочее, 8 отдых),\r\n    //    то необходимо проставить время просрочки\r\n    if (status === 0) {\r\n      updateDisplayTime(workTimer.seconds);\r\n    } else if (status === 1 || status === 2) {\r\n      updateDisplayTime(workTimer.seconds);\r\n    } else if (status === 3) {\r\n      if (workTimer.needsOver) {\r\n        updateDisplayTime(overTime.seconds);\r\n      } else if (relaxTimer.initSeconds > 0) {\r\n        updateDisplayTimeToRelax();\r\n      } else {\r\n        updateDisplayTime(workTimer.seconds);\r\n      }\r\n    } else if (status === 5 || status === 6) {\r\n      updateDisplayTimeToRelax();\r\n    } else if (status === 7) {\r\n      if (relaxTimer.needsOver) {\r\n        updateDisplayTime(overTime.seconds);\r\n      } else {\r\n        updateDisplayTime(workTimer.seconds);\r\n      }\r\n    } else if (status === 4 || status === 8) {\r\n      updateDisplayTime(overTime.seconds);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [workTimer, relaxTimer, bigRelaxTimer, overTime]);\r\n  // обновление tab title\r\n  useEffect(() => {\r\n    const { hours, minutes, seconds } = displayTimer;\r\n    const time =\r\n      `${getTimeNum(hours)}` +\r\n      `:${getTimeNum(minutes)}` +\r\n      `:${getTimeNum(seconds)}`;\r\n\r\n    const labels = {\r\n      0: \"Stopped\",\r\n      1: `Work ${time}`,\r\n      2: `Work paused ${time}`,\r\n      3: \"Stopped\",\r\n      4: `Work over ${time}`,\r\n      5: `Relax ${time}`,\r\n      6: `Relax paused ${time}`,\r\n      7: \"Stopped\",\r\n      8: `Relax over ${time}`,\r\n    };\r\n\r\n    document.title = labels[status];\r\n  }, [status, displayTimer]);\r\n\r\n  const stopWork = () => {\r\n    setWorkTimer((prev) => ({\r\n      ...prev,\r\n      count: prev.count + 1,\r\n    }));\r\n    setStatus(pomodoroStatuses.work_stopped);\r\n  };\r\n  const stopRelax = () => {\r\n    if (relaxType === 2) {\r\n      setBigRelaxTimer((prev) => ({\r\n        ...prev,\r\n        count: prev.count + 1,\r\n      }));\r\n    } else {\r\n      setRelaxTimer((prev) => ({\r\n        ...prev,\r\n        count: prev.count + 1,\r\n      }));\r\n    }\r\n    setStatus(pomodoroStatuses.relax_stopped);\r\n  };\r\n\r\n  const timerTick = (timer, setTimer) => {\r\n    const { seconds } = timer;\r\n    if (seconds <= 0) {\r\n      return true;\r\n    }\r\n\r\n    const newSeconds = seconds - 1;\r\n    setTimer((prev) => ({\r\n      ...prev,\r\n      seconds: newSeconds,\r\n    }));\r\n    if (newSeconds <= 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  // work tick\r\n  useInterval(\r\n    () => {\r\n      const isFinished = timerTick(workTimer, setWorkTimer);\r\n      if (isFinished) {\r\n        stopWork();\r\n      }\r\n    },\r\n    status === pomodoroStatuses.work_running ? 1000 : null\r\n  );\r\n  // relax tick\r\n  useInterval(\r\n    () => {\r\n      if (timerTick(relaxTimer, setRelaxTimer)) {\r\n        stopRelax();\r\n      }\r\n    },\r\n    status === pomodoroStatuses.relax_running && relaxType === 1 ? 1000 : null\r\n  );\r\n  // big relax tick\r\n  useInterval(\r\n    () => {\r\n      if (timerTick(bigRelaxTimer, setBigRelaxTimer)) {\r\n        stopRelax();\r\n      }\r\n    },\r\n    status === pomodoroStatuses.relax_running && relaxType === 2 ? 1000 : null\r\n  );\r\n  // over tick\r\n  useInterval(\r\n    () => {\r\n      const seconds = overTime.seconds + 1;\r\n      setOverTime((prev) => ({\r\n        ...prev,\r\n        seconds,\r\n      }));\r\n      let type;\r\n      if (\r\n        status === pomodoroStatuses.work_over_running &&\r\n        workTimer.needsNotify &&\r\n        seconds % workTimer.overSeconds === 0\r\n      ) {\r\n        type = \"Work\";\r\n      } else if (\r\n        status === pomodoroStatuses.relax_over_running &&\r\n        ((relaxType === 1 &&\r\n          relaxTimer.needsNotify &&\r\n          seconds % workTimer.overSeconds === 0) ||\r\n          (relaxType === 2 &&\r\n            bigRelaxTimer.needsNotify &&\r\n            seconds % bigRelaxTimer.overSeconds === 0))\r\n      ) {\r\n        type = \"Relax\";\r\n      }\r\n      if (type) {\r\n        const time = transSecsToTime(seconds);\r\n        const sTime =\r\n          `${time.hours ? time.hours + \"h \" : \"\"}` +\r\n          `${time.minutes ? time.minutes + \"m \" : \"\"}` +\r\n          `${time.seconds}s`;\r\n        showNotification(`${type} over ${sTime} ago`);\r\n      }\r\n    },\r\n    status === pomodoroStatuses.work_over_running ||\r\n      status === pomodoroStatuses.relax_over_running\r\n      ? 1000\r\n      : null\r\n  );\r\n\r\n  // button handlers\r\n  const handleStartWorkBtn = () => {\r\n    setStatus(pomodoroStatuses.work_running);\r\n    updateDisplayTime(workTimer.seconds);\r\n  };\r\n  const handlePauseWorkBtn = () => {\r\n    setStatus(pomodoroStatuses.work_paused);\r\n  };\r\n  const handleStopWorkBtn = () => {\r\n    setWorkTimer((prev) => ({ ...prev, needsOver: false }));\r\n    stopWork();\r\n  };\r\n  const handleStartRelaxBtn = () => {\r\n    setStatus(pomodoroStatuses.relax_running);\r\n    updateDisplayTimeToRelax();\r\n  };\r\n  const handlePauseRelaxBtn = () => {\r\n    setStatus(pomodoroStatuses.relax_paused);\r\n  };\r\n  const handleStopRelaxBtn = () => {\r\n    if (relaxType === 1) {\r\n      setRelaxTimer((prev) => ({ ...prev, needsOver: false }));\r\n    } else if (relaxType === 2) {\r\n      setBigRelaxTimer((prev) => ({ ...prev, needsOver: false }));\r\n    }\r\n    stopRelax();\r\n  };\r\n  const handleStopBtn = () => {\r\n    setStatus(pomodoroStatuses.stopped);\r\n  };\r\n\r\n  const statusNameFactory = {\r\n    0: \"stopped\",\r\n    1: \"started\",\r\n    2: \"paused\",\r\n    3: \"finished\",\r\n    4: \"over time\",\r\n    5: \"relax started\",\r\n    6: \"relax paused\",\r\n    7: \"relax finished\",\r\n    8: \"relax over time\",\r\n  };\r\n  return (\r\n    <div className=\"pomodoro-timer\">\r\n      <div className=\"pomodoro-timer__settings-btn\">{settingsBtnComponent}</div>\r\n      <div className=\"pomodoro-timer__status\">\r\n        {timerName} {statusNameFactory[status]}\r\n      </div>\r\n      <Clock\r\n        readOnly={true}\r\n        hours={displayTimer.hours}\r\n        minutes={displayTimer.minutes}\r\n        seconds={displayTimer.seconds}\r\n      />\r\n      <PomodoroButtons\r\n        status={status}\r\n        onStartWorkBtn={handleStartWorkBtn}\r\n        onPauseWorkBtn={handlePauseWorkBtn}\r\n        onStartRelaxBtn={handleStartRelaxBtn}\r\n        onPauseRelaxBtn={handlePauseRelaxBtn}\r\n        onStopWorkBtn={handleStopWorkBtn}\r\n        onStopRelaxBtn={handleStopRelaxBtn}\r\n        onStopBtn={handleStopBtn}\r\n      />\r\n      <div className=\"pomodoro-timer__settings\">{settingsComponent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PomodoroTimer;\r\n","import PomodoroTimer from \"./pomodoro-timer\";\r\nexport default PomodoroTimer;\r\n","import { nanoid } from \"nanoid\";\r\nimport React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { transSecsToTime, transTimeToSecs } from \"../../utils/timeTransform\";\r\n\r\nimport Clock from \"../clock\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst SettingsPosition = ({\r\n  seconds,\r\n  overSeconds,\r\n  needsOver,\r\n  needsStop,\r\n  needsNotify,\r\n  onTimeChange,\r\n  onOverTimeChange,\r\n  onSwitchChange,\r\n  settingName,\r\n}) => {\r\n  const time = transSecsToTime(seconds);\r\n  const overTime = transSecsToTime(overSeconds);\r\n\r\n  const handleOnTimeChange = (hours, minutes, seconds, onChange) => {\r\n    const secs = transTimeToSecs(hours, minutes, seconds);\r\n    onChange(secs);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings__position\">\r\n      <div className=\"settings__title settings__title_small\">\r\n        {settingName}:\r\n      </div>\r\n      <div className=\"settings__clock-wrapper\">\r\n        <div className=\"settings__clock-name\">Timer</div>\r\n        <Clock\r\n          readOnly={false}\r\n          hours={time.hours}\r\n          minutes={time.minutes}\r\n          seconds={time.seconds}\r\n          onTimeChange={(h, m, s) => handleOnTimeChange(h, m, s, onTimeChange)}\r\n        />\r\n        <div className=\"settings__clock-name\">Over notify in</div>\r\n        <Clock\r\n          readOnly={false}\r\n          hours={overTime.hours}\r\n          minutes={overTime.minutes}\r\n          seconds={overTime.seconds}\r\n          onTimeChange={(h, m, s) =>\r\n            handleOnTimeChange(h, m, s, onOverTimeChange)\r\n          }\r\n        />\r\n      </div>\r\n      <ul className=\"settings__switches\">\r\n        <li>\r\n          <Form.Check\r\n            type=\"switch\"\r\n            label=\"Needs over\"\r\n            id={nanoid()}\r\n            checked={needsOver}\r\n            onChange={(e) => onSwitchChange(e, \"needsOver\")}\r\n          />\r\n        </li>\r\n        <li>\r\n          <Form.Check\r\n            type=\"switch\"\r\n            label=\"Needs stop\"\r\n            id={nanoid()}\r\n            checked={needsStop}\r\n            onChange={(e) => onSwitchChange(e, \"needsStop\")}\r\n          />\r\n        </li>\r\n        <li>\r\n          <Form.Check\r\n            type=\"switch\"\r\n            label=\"Needs notify\"\r\n            id={nanoid()}\r\n            checked={needsNotify}\r\n            onChange={(e) => onSwitchChange(e, \"needsNotify\")}\r\n          />\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPosition;\r\n","import Settings from \"./settings\";\r\nexport default Settings;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport SettingsPosition from \"../settings-position/settings-position\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Settings = ({\r\n  onSaveClick,\r\n  workTimerSettings,\r\n  relaxTimerSettings,\r\n  bigRelaxTimerSettings,\r\n}) => {\r\n  const [workSettings, setWorkSettings] = useState({\r\n    seconds: workTimerSettings.seconds,\r\n    needsOver: workTimerSettings.needsOver,\r\n    needsStop: workTimerSettings.needsStop,\r\n    needsNotify: workTimerSettings.needsNotify,\r\n    overSeconds: workTimerSettings.overSeconds,\r\n  });\r\n  const [relaxSettings, setRelaxSettings] = useState({\r\n    seconds: relaxTimerSettings.seconds,\r\n    needsOver: relaxTimerSettings.needsOver,\r\n    needsStop: relaxTimerSettings.needsStop,\r\n    needsNotify: relaxTimerSettings.needsNotify,\r\n    overSeconds: relaxTimerSettings.overSeconds,\r\n  });\r\n  const [bigRelaxSettings, setBigRelaxSettings] = useState({\r\n    seconds: bigRelaxTimerSettings.seconds,\r\n    needsOver: bigRelaxTimerSettings.needsOver,\r\n    needsStop: bigRelaxTimerSettings.needsStop,\r\n    needsNotify: bigRelaxTimerSettings.needsNotify,\r\n    overSeconds: bigRelaxTimerSettings.overSeconds,\r\n    needed: bigRelaxTimerSettings.needed,\r\n    period: bigRelaxTimerSettings.period,\r\n  });\r\n\r\n  const handleOnTimerChange = (seconds, setSettings) => {\r\n    setSettings((prev) => ({ ...prev, seconds }));\r\n  };\r\n  const handleOnOverTimerChange = (overSeconds, setSettings) => {\r\n    setSettings((prev) => ({ ...prev, overSeconds }));\r\n  };\r\n  const handleOnSwitchChange = (e, type, setSettings) => {\r\n    const checked = e.target.checked;\r\n    switch (type) {\r\n      case \"needsOver\":\r\n        setSettings((prev) => ({ ...prev, needsOver: checked }));\r\n        break;\r\n      case \"needsNotify\":\r\n        setSettings((prev) => ({ ...prev, needsNotify: checked }));\r\n        break;\r\n      case \"needsStop\":\r\n        setSettings((prev) => ({ ...prev, needsStop: checked }));\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleOnSaveClick = () => {\r\n    onSaveClick({\r\n      workTimerSettings: workSettings,\r\n      relaxTimerSettings: relaxSettings,\r\n      bigRelaxTimerSettings: bigRelaxSettings,\r\n    });\r\n  };\r\n\r\n  const workClock = !workSettings ? null : (\r\n    <div>\r\n      <SettingsPosition\r\n        seconds={workSettings.seconds}\r\n        overSeconds={workSettings.overSeconds}\r\n        needsOver={workSettings.needsOver}\r\n        needsStop={workSettings.needsStop}\r\n        needsNotify={workSettings.needsNotify}\r\n        onTimeChange={(s) => handleOnTimerChange(s, setWorkSettings)}\r\n        onOverTimeChange={(s) => handleOnOverTimerChange(s, setWorkSettings)}\r\n        onSwitchChange={(e, t) => handleOnSwitchChange(e, t, setWorkSettings)}\r\n        settingName=\"Working timer\"\r\n      />\r\n      <SettingsPosition\r\n        seconds={relaxSettings.seconds}\r\n        overSeconds={relaxSettings.overSeconds}\r\n        needsOver={relaxSettings.needsOver}\r\n        needsStop={relaxSettings.needsStop}\r\n        needsNotify={relaxSettings.needsNotify}\r\n        onTimeChange={(s) => handleOnTimerChange(s, setRelaxSettings)}\r\n        onOverTimeChange={(s) => handleOnOverTimerChange(s, setRelaxSettings)}\r\n        onSwitchChange={(e, t) => handleOnSwitchChange(e, t, setRelaxSettings)}\r\n        settingName=\"Relax timer\"\r\n      />\r\n      <SettingsPosition\r\n        seconds={bigRelaxSettings.seconds}\r\n        overSeconds={bigRelaxSettings.overSeconds}\r\n        needsOver={bigRelaxSettings.needsOver}\r\n        needsStop={bigRelaxSettings.needsStop}\r\n        needsNotify={bigRelaxSettings.needsNotify}\r\n        onTimeChange={(s) => handleOnTimerChange(s, setBigRelaxSettings)}\r\n        onOverTimeChange={(s) =>\r\n          handleOnOverTimerChange(s, setBigRelaxSettings)\r\n        }\r\n        onSwitchChange={(e, t) =>\r\n          handleOnSwitchChange(e, t, setBigRelaxSettings)\r\n        }\r\n        settingName=\"Big relax timer\"\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"settings\">\r\n      <div className=\"settings__title\">Settings</div>\r\n      {workClock}\r\n      <Button onClick={handleOnSaveClick}>Save</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import PomodoroTimerWrapper from \"./pomodoro-timer-wrapper\";\r\nexport default PomodoroTimerWrapper;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport PomodoroTimer from \"../pomodoro-timer\";\r\nimport Settings from \"../settings\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst PomodoroTimerWrapper = () => {\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [workSettings, setWorkSettings] = useState({\r\n    seconds: 1800,\r\n    overSeconds: 120,\r\n    needsNotify: true,\r\n    needsStop: false,\r\n    needsOver: true,\r\n  });\r\n  const [relaxSettings, setRelaxSettings] = useState({\r\n    seconds: 300,\r\n    overSeconds: 60,\r\n    needsNotify: true,\r\n    needsStop: false,\r\n    needsOver: true,\r\n  });\r\n  const [bigRelaxSettings, setBigRelaxSettings] = useState({\r\n    seconds: 600,\r\n    overSeconds: 90,\r\n    needsNotify: true,\r\n    needsStop: false,\r\n    needsOver: true,\r\n    needed: true,\r\n    period: 2,\r\n  });\r\n\r\n  const handleSettingsButton = () => {\r\n    setShowSettings(!showSettings);\r\n  };\r\n\r\n  const save = (from, set) => {\r\n    console.log(from);\r\n    const { seconds, overSeconds, needsNotify, needsStop, needsOver } = from;\r\n\r\n    set({\r\n      seconds,\r\n      overSeconds,\r\n      needsNotify,\r\n      needsStop,\r\n      needsOver,\r\n    });\r\n  };\r\n\r\n  const handleOnSaveClick = ({\r\n    workTimerSettings,\r\n    relaxTimerSettings,\r\n    bigRelaxTimerSettings,\r\n  }) => {\r\n    save(workTimerSettings, setWorkSettings);\r\n    save(relaxTimerSettings, setRelaxSettings);\r\n    save(bigRelaxTimerSettings, setBigRelaxSettings);\r\n  };\r\n\r\n  const settings = !showSettings ? null : (\r\n    <Settings\r\n      onSaveClick={handleOnSaveClick}\r\n      workTimerSettings={workSettings}\r\n      relaxTimerSettings={relaxSettings}\r\n      bigRelaxTimerSettings={bigRelaxSettings}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <PomodoroTimer\r\n      settingsComponent={settings}\r\n      settingsBtnComponent={\r\n        <Button onClick={handleSettingsButton}>Settings</Button>\r\n      }\r\n      workSettings={workSettings}\r\n      relaxSettings={relaxSettings}\r\n      bigRelaxSettings={bigRelaxSettings}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PomodoroTimerWrapper;\r\n","import App from \"./app\";\r\nexport default App;\r\n","import React, { useEffect } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport PomodoroTimerWrapper from \"../pomodoro-timer-wrapper\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function App() {\r\n  useEffect(() => {\r\n    // notif\r\n    if (!(\"Notification\" in window)) {\r\n      console.log(\"notifications disabled\");\r\n    } else {\r\n      Notification.requestPermission();\r\n    }\r\n\r\n    // title\r\n    document.title = \"Timer app\";\r\n  }, []);\r\n\r\n  return <PomodoroTimerWrapper />;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/app\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}